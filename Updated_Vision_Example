//Networktable_Sample_Code (Notepad++ file)
//DERT 2040 Created 1/26/2017
//updated 2/4/2017

// Read the Commit Message for details on how this works.

// Sample robot code to illustrate Networktable usage only. THis does not have the drive and implement code
#include <iostream>
#include <memory>
#include <string>
#include "WPILib.h"

#include <IterativeRobot.h>
#include <LiveWindow/LiveWindow.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>

class Robot: public frc::IterativeRobot
{
private:
	frc::LiveWindow* lw = LiveWindow::GetInstance();
	frc::SendableChooser<std::string> chooser;
	const std::string autoNameDefault = "Default";
	const std::string autoNameCustom = "My Auto";
	std::string autoSelected;

	std::shared_ptr<NetworkTable> m_Table;
		double cX; // junk value is 1280
		double cY; // junk value in=s 1280
		double defaultvalue;
		bool tgtStatus; // junk value (no targetO is 0
		double tgtDist; //junk is -1
		double errorX;   //junk is 101 (this may not work)
		double errorY;   // junk is 101 (suggest 1001)
		double tgtAng;  //junk value is 36
		//double seconds;
public:

	Robot()
	{
		m_Table = NetworkTable::GetTable("Vision");
		defaultvalue = -1;
		cX = 0;
		cY = 0;
		tgtStatus = 1;
		tgtDist = 10;
		errorX = 0;
		errorY = 0;
		tgtAng = 0;
		//seconds = 0;
	}
	void RobotInit()
	{
		chooser.AddDefault(autoNameDefault, autoNameDefault);
		chooser.AddObject(autoNameCustom, autoNameCustom);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);
	}

	/*
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * GetString line to get the auto name from the text box below the Gyro.
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * if-else structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	void AutonomousInit() override
	{
		autoSelected = chooser.GetSelected();
		// std::string autoSelected = SmartDashboard::GetString("Auto Selector", autoNameDefault);
		std::cout << "Auto selected: " << autoSelected << std::endl;

		if (autoSelected == autoNameCustom)
		{
			// Custom Auto goes here
		}
		else
		{
			// Default Auto goes here
		}
	}

	void AutonomousPeriodic()
	{
		if (autoSelected == autoNameCustom)
		{
			// Custom Auto goes here
		}
		else
		{
			// Default Auto goes here
		}
	}

	void TeleopInit()
	{

	}

	void TeleopPeriodic()
	{
		//NETWORK TABLES STEP 1.
		//this section of code will pull the numbers off the newtorl table that the pi
		//provided. However, these will only show up on the "variables" tab on the dashboard.
		//this syntax will not make the variables show up on a custom GUI. See the notes below to
		// do that.
		cX = m_Table->GetNumber("cX",cX);
		cY= m_Table->GetNumber("cY",cY);
		tgtStatus = m_Table->GetNumber("tgtStatus",tgtStatus);
		tgtDist = m_Table->GetNumber("tgtDist", tgtDist);
		errorX = m_Table->GetNumber("errorX", errorX);
		errorY = m_Table->GetNumber("errorY", errorY);
		tgtAng = m_Table->GetNumber("tgtAngle", tgtAng);
		//seconds = m_Table->GetNumber("seconds", seconds);


		//NETWORK TABLES STEP 2.
		// This section puts the networktable values onto the Smartdashboard
		//"DB/String" 0 -7 are on the "Basic Tab" and are OK for testing but there are no labels
		//Use PutNumber to populate the variables and get the values to the indicator or graph etc.
		//the "vision" prefix is not necessary, it just helps identify what variables are coming from
		//the Pi. For instance the name "Vision/cX" is the name of the variable cX. This code, and the
		//NT Read block in the dashboard need to have the same name.
		SmartDashboard::PutString("DB/String 0", std::to_string(cX));
		SmartDashboard::PutString("DB/String 1", std::to_string(cY));
		SmartDashboard::PutNumber("cX", (cX));//make sure the constant in Labview dashboard is called "Vision/cx" ALSO
		SmartDashboard::PutNumber("cY", (cY));
		SmartDashboard::PutNumber("tgtStatus", (tgtStatus));
		SmartDashboard::PutNumber("tgtDist", (tgtDist));
		SmartDashboard::PutNumber("errorX", (errorX));
		SmartDashboard::PutNumber("errorY", (errorY));
		SmartDashboard::PutNumber("tgtAngle", (tgtAng));
		//SmartDashboard::PutNumber("seconds", (seconds));




	}

	void TestPeriodic()
	{
		lw->Run();
	}



};

START_ROBOT_CLASS(Robot)
